#!/bin/bash

# Default variable initialization; Change if other club only on your local copy or a fork
arg=$1
club_name="MHS Solar Racing"
club_name_var_friendly="solar_car"
sponsor="Brandon Searcey"
president="Ben Stidham"
vice_president="Hudson Nguyen"
meeting_date="$(date +'%m-%d-%Y')"
file_name="$club_name_var_friendly.$meeting_date.md"
altering_time="$(date +'%I:%M %p')"
meeting_type="Build Meeting"
purchace=false
purchace_item=""
club_officers=("President" "Vice President")
club_officer_length=${#club_officers[@]}
# Meeting specific details you may want to change are below the Argument handler

# Argument handler
case $arg in
  "")
    # Do nothing if no args
    ;;
  "-h")
    # Prints out help message
    echo "Meeting Minute generator for solar car. Usage: ./minutegen [args]"
    echo "-h                     Prints this help message"
    echo "-s                     Set up system for minutegen"
    echo "-o [prez] [vp]         Replace president and vp officer names for this meeting"
    echo "-t [sponsor]           Replace teacher sponsor for this meeting"
    echo "-m [type]              Change meeting type for this meeting"
    echo "-b [item]              Add section of framework to buy item at end of minutes"
    exit 0
    ;;
  "-s")
    # Installs, with noconfirm so user doesn't have to hit "Y" or ENTER to install
    # Grep's to check which distro's being used so that we can let a few more work and use it
    if grep -q -i "arch" /etc/issue || grep -q -i "manjaro" /etc/issue
    then
      # Arch
      sudo pacman -S npm --noconfirm
    elif grep -q -i "ubuntu" /etc/issue || grep -q -i "debain" /etc/issue
    then
      # Debian
      sudo apt-get -y install npm  
    elif grep -q -i "fedora" /etc/issue
    then
      # Fedora
      sudo dnf -y install npm
    else
      echo "IDK. Get a different distro"
      exit 1
    fi
    sudo npm i -g md-to-pdf
    exit 0
    ;;
  "-o")
    # Set new variables for in case someone's out i guess idk
    president="$2"
    vice_president="$3"
    ;;
  "-t")
    # Change teacher sponsor
    sponsor="$2"
    ;;
  "-m")
    # Change meeting type 
    meeting_type="$2"
    ;;
  "-b")
    # Set purchace var to true so that section functions
    purchace=true
    purchace_item=$2
    ;;
  *)
    # Handle any other non-existent args
    echo "Please input valid arguments. run './minutegen -h' to see list of commands & syntax"
    exit 1
    ;;
esac

# default_descriptions array added here since some of of the variable it refernces change depending on any args, and other default_* arrays are here for simplicity
default_sections=("START MEETING" "HEAD TO SHOP" "END MEETING")
default_descriptions=("President $president and Vice President $vice_president call $club_name $meeting_type to order in $sponsor's room" "$president and $vice_president lead $club_name to metal shop to work on car" "$president and $vice_president adjourn $meeting_type on $meeting_date")
default_length=${#default_sections[@]}

# File manipulation part start

# Create file
touch "$file_name"

# Enter basic meeting data into file
echo "# $club_name $meeting_type on $meeting_date  " > "$file_name"
echo "_______" >> "$file_name"
echo "<b>President: </b>$president  " >> "$file_name"
echo "<b>Vice President: </b>$vice_president  " >> "$file_name"
echo "<b>Club Sponsor: </b>$sponsor  " >> "$file_name"

# Spacers before body content
echo "</br></br></br>" >> "$file_name"

# Parse through default sections to build md file
for (( i=0; i<$default_length; i++ )); do

  # Prompt and wait for enter key to continue
  read -p "Press enter key when ${default_sections[$i]} starts"

  # Take current time
  altering_time="$(date +'%I:%M %p')"
  echo "## ${default_sections[$i]}: $altering_time  " >> "$file_name"
  echo "_______" >> "$file_name"
  echo "${default_descriptions[$i]}" >> "$file_name"
  echo "</br></br>" >> "$file_name"
done

# Add purchace section to bottom of pdf
if $purchace; then
  # Extra spacing before purchace section
  echo "</br></br></br>" >> "$file_name"
  echo "## PURCHACE REQUEST FOR $purchace_item" >> "$file_name"
  echo "</br></br>" >> "$file_name"
  echo "### SIGNATURES: " >> "$file_name"
  echo "</br>" >> "$file_name"
  # Run through list of officers to add them and a place to sign at end
  for (( i=0; i<$club_officer_length; i++ )); do
    echo "<b>${club_officers[$i]}</b>: " >> "$file_name"
    echo "________________________________________" >> "$file_name"
    echo "</br></br>" >> "$file_name"
  done
fi

# Convert then .md file to a .pdf file, since I doubt the district has a md renderer
md-to-pdf "./$file_name"

# Clean up after finished by removing md file
rm -f "$file_name"
